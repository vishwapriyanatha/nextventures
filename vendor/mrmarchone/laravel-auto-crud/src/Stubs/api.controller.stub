<?php

namespace {{ namespace }};

use App\Http\Controllers\Controller;
use {{ requestNamespace }};
use {{ resourceNamespace }};
use {{ modelNamespace }};
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class {{ class }} extends Controller
{
    public function index(): \Illuminate\Http\Resources\Json\AnonymousResourceCollection
    {
        return {{ resource }}::collection({{ model }}::latest()->paginate(10));
    }

    public function store({{ request }} $request): {{ resource }}|\Illuminate\Http\JsonResponse
    {
        try {
            ${{ modelVariable }} = {{ model }}::create($request->validated());
            return new {{ resource }}(${{ modelVariable }});
        } catch (\Exception $exception) {
            report($exception);
            return response()->json(['error' => 'There is an error.'], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    public function show({{ model }} ${{ modelVariable }}): {{ resource }}
    {
        return {{ resource }}::make(${{ modelVariable }});
    }

    public function update({{ request }} $request, {{ model }} ${{ modelVariable }}): {{ resource }}|\Illuminate\Http\JsonResponse
    {
        try {
            ${{ modelVariable }}->update($request->validated());
            return new {{ resource }}(${{ modelVariable }});
        } catch (\Exception $exception) {
            report($exception);
            return response()->json(['error' => 'There is an error.'], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    public function destroy({{ model }} ${{ modelVariable }}): \Illuminate\Http\JsonResponse
    {
        try {
            ${{ modelVariable }}->delete();
            return response()->json(['message' => 'Deleted successfully'], Response::HTTP_OK);
        } catch (\Exception $exception) {
            report($exception);
            return response()->json(['error' => 'There is an error.'], Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }
}
